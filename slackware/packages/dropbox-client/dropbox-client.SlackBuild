#!/bin/sh
# $Id: dropbox-client.SlackBuild,v 1.11 2014/01/16 13:21:32 root Exp root $
# Copyright 2009, 2010, 2012, 2013, 2014  Eric Hameleers, Eindhoven, NL
# All rights reserved.
#
#   Permission to use, copy, modify, and distribute this software for
#   any purpose with or without fee is hereby granted, provided that
#   the above copyright notice and this permission notice appear in all
#   copies.
#
#   THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
#   WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#   MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
#   IN NO EVENT SHALL THE AUTHORS AND COPYRIGHT HOLDERS AND THEIR
#   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
#   LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
#   USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
#   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
#   OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
#   OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
#   SUCH DAMAGE.
# -----------------------------------------------------------------------------
#
# Slackware SlackBuild script 
# ===========================
# By:         Eric Hameleers <alien@slackware.com>
# For:        dropbox-client
# Descr:      store, sync and share files online
# URL:        http://www.getdropbox.com/
# Needs:      
# Changelog:  
# 0.6.1-1:    08/Oct/2009 by Eric Hameleers <alien@slackware.com>
#             * Initial build. Repackaging a binary RPM and removing the
#               dependency on nautilus (i.e. gnome).
#               Note: this is just the client. Running this will automatically
#               download and start your personal dropbox daemon.
#               This package does not need nautilus to be installed, but in
#               case you do have gnome, the package will integrate into the
#               nautilus.
# 0.6.2-1:    02/jun/2010 by Eric Hameleers <alien@slackware.com>
#             * Updated.
# 0.6.3-1:    22/jul/2010 by Eric Hameleers <alien@slackware.com>
#             * Updated.
# 0.6.7-1:    18/dec/2010 by Eric Hameleers <alien@slackware.com>
#             * Updated. Also fix the fake nautilus script to filter out the
#               "--no-desktop" argument passed by dropbox to the real nautilus.
# 1.4.0-1:    14/oct/2012 by Eric Hameleers <alien@slackware.com>
#             * Updated.
# 1.6.0-1:    03/feb/2013 by Eric Hameleers <alien@slackware.com>
#             * Updated.
# 1.6.1-1:    16/jan/2014 by Eric Hameleers <alien@slackware.com>
#             * Updated.
# 
# Run 'sh dropbox-client.SlackBuild' to build a Slackware package.
# The package (.tgz) and .txt file as well as build logs are created in /tmp .
# Install it using 'installpkg'. 
#
# -----------------------------------------------------------------------------

PRGNAM=dropbox-client
RPMNAM=nautilus-dropbox
VERSION=${VERSION:-2023.09.06}
MINOR=${MINOR:-1}
BUILD=${BUILD:-1}
TAG=${TAG:-alien}

# Where do we look for sources?
SRCDIR=$(cd $(dirname $0); pwd)

# Place to build (TMP) package (PKG) and output (OUTPUT) the program:
TMP=${TMP:-/tmp/build}
PKG=$TMP/package-$PRGNAM
OUTPUT=${OUTPUT:-/tmp}

# Automatically determine the architecture we're building on:
case "${ARCH:-$( uname -m )}" in
  i?86) export ARCH=i386 ;;
  x86_64) export ARCH=x86_64 ;;
  *) echo "Only x86 and x86_64 are supported platforms!"
     exit 1
     ;;
esac

SOURCE="$SRCDIR/${RPMNAM}-${VERSION}-${MINOR}.fedora.${ARCH}.rpm"
SRCURL="http://linux.dropbox.com/packages/fedora/${RPMNAM}-${VERSION}-${MINOR}.fedora.${ARCH}.rpm"

##
## --- with a little luck, you won't have to edit below this point --- ##
##

# Exit the script on errors:
set -e
trap 'echo "$0 FAILED at line ${LINENO}" | tee $OUTPUT/error-${PRGNAM}.log' ERR
# Catch unitialized variables:
set -u
P1=${1:-1}

# Save old umask and set to 0022:
_UMASK_=$(umask)
umask 0022

# Create working directories:
mkdir -p $OUTPUT          # place for the package to be saved
mkdir -p $TMP/tmp-$PRGNAM # location to build the source
mkdir -p $PKG             # place for the package to be built
rm -rf $PKG/*             # always erase old package's contents
rm -rf $TMP/tmp-$PRGNAM/* # remove the remnants of previous build
rm -rf $OUTPUT/{configure,make,install,error,makepkg}-$PRGNAM.log
                          # remove old log files

# Source file availability:
if ! [ -f ${SOURCE} ]; then
  echo "Source '$(basename ${SOURCE})' not available yet..."
  # Check if the $SRCDIR is writable at all - if not, download to $OUTPUT
  [ -w "$SRCDIR" ] || SOURCE="$OUTPUT/$(basename ${SOURCE})"
  if [ -f ${SOURCE} ]; then echo "Ah, found it!"; continue; fi
  if ! [ "x${SRCURL}" == "x" ]; then
    echo "Will download file to $(dirname $SOURCE)"
    wget -nv -T 20 -O "${SOURCE}" "${SRCURL}" || true
    if [ $? -ne 0 -o ! -s "${SOURCE}" ]; then
      echo "Fail to download '$(basename ${SOURCE})'. Aborting the build."
      mv -f "${SOURCE}" "${SOURCE}".FAIL
      exit 1
    fi
  else
    echo "File '$(basename ${SOURCE})' not available... aborting the build."
    exit 1
  fi
fi

if [ "$P1" == "--download" ]; then
  echo "Download complete."
  exit 0
fi

# --- PACKAGE BUILDING ---

echo "++"
echo "|| $PRGNAM-$VERSION"
echo "++"

cd $TMP/tmp-$PRGNAM
echo "Extracting the archive(s) for $PRGNAM..."
rpm2tgz ${SOURCE}
cd $PKG
explodepkg $TMP/tmp-$PRGNAM/$( basename $SOURCE .rpm ).tgz

# The dropbox daemon expects nautilus in it's PATH - so we provide a
# shell script by that name that in fact will run your default file manager:
# (if your system actually *has* Nautilus then this little script will be
#  discarded).
mkdir -p $PKG/usr/bin
cat <<"EOT" > $PKG/usr/bin/nautilus.new
#!/bin/bash
# Filter out "--no-desktop" from $@ which dropbox passes to the real nautilus:
declare -a Arguments
for i; do
  case "$i" in
  --no-desktop)
    ;;
  *)
    Arguments[${#Arguments[@]}]="$i"
    ;;
  esac
done
xdg-open "${Arguments[@]}"
exit 0
EOT
chmod 755 $PKG/usr/bin/nautilus.new

# Add this to the doinst.sh:
! [ -d $PKG/install ] && mkdir -p $PKG/install
cat <<EOT >> $PKG/install/doinst.sh
# Handle the incoming configuration files:
config() {
  for infile in \$1; do
    NEW="\$infile"
    OLD="\`dirname \$NEW\`/\`basename \$NEW .new\`"
    # If there's no config file by that name, mv it over:
    if [ ! -r \$OLD ]; then
      mv \$NEW \$OLD
    elif [ "\`cat \$OLD | md5sum\`" = "\`cat \$NEW | md5sum\`" ]; then
      # toss the redundant copy
      rm \$NEW
    fi
    # Otherwise, we leave the .new copy for the admin to consider...
  done
}

# Make sure that we do not overwrite a real nautilus:
config usr/bin/nautilus.new

# Update the desktop database:
if [ -x usr/bin/update-desktop-database ]; then
  chroot . /usr/bin/update-desktop-database /usr/share/applications > /dev/null 2>&1
fi

# Update hicolor theme cache:
if [ -d usr/share/icons/hicolor ]; then
  if [ -x /usr/bin/gtk-update-icon-cache ]; then
    chroot . /usr/bin/gtk-update-icon-cache -f -t usr/share/icons/hicolor 1> /dev/null 2> /dev/null
  fi
fi

EOT

# Add documentation:
mkdir -p $PKG/usr/doc/$PRGNAM-$VERSION
cat $SRCDIR/$(basename $0) > $PKG/usr/doc/$PRGNAM-$VERSION/$PRGNAM.SlackBuild
chown -R root:root $PKG/usr/doc/$PRGNAM-$VERSION
find $PKG/usr/doc -type f -exec chmod 644 {} \;

# Move man to the Slackware default location:
mv $PKG/usr/share/man $PKG/usr

# Add a package description:
mkdir -p $PKG/install
cat $SRCDIR/slack-desc > $PKG/install/slack-desc

# Build the package:
cd $PKG
makepkg --linkadd y --chown n $OUTPUT/${PRGNAM}-${VERSION}-${ARCH}-${BUILD}${TAG}.tgz 2>&1 | tee $OUTPUT/makepkg-${PRGNAM}.log
cd $OUTPUT
md5sum ${PRGNAM}-${VERSION}-${ARCH}-${BUILD}${TAG}.tgz > ${PRGNAM}-${VERSION}-${ARCH}-${BUILD}${TAG}.tgz.md5
cd -
cat $PKG/install/slack-desc | grep "^${PRGNAM}" > $OUTPUT/${PRGNAM}-${VERSION}-${ARCH}-${BUILD}${TAG}.txt

# Restore the original umask:
umask ${_UMASK_}

